
Hi,

I decided to pick the NLP problem 'Stitch the torn Wiki' at Hackerrank.

Sadly, I didn't manage to reach a perfect score of 100 in the time I had
available. My final score was 93.33. 

I followed the approach suggested by the video, using cosine distance
on the word frequency vectors. I did weight the frequency of the tokens
by the size of the document, and tried log(frequency), but I didn't
score more that 93.33.

Maybe my tokenizer could also be improved, or I could optimise the pairing.

Maarten


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <ctype.h>

using namespace std;


class Section
{
private:
    string         m_Text;
    unsigned int   m_Tokens;
    vector<double> m_TokenCounts;

    bool WhiteSpace(const char c) const
    {
        return c == ' ' || c == '\t' || c == '\n';
    }

    string GetToken(const string& in, unsigned int& start) const
    {
        while (start < in.length() && WhiteSpace(in[start])) ++start;

        string out;

        while (start < in.length())
        {
            const char c = in[start];

            if (WhiteSpace(c)) return out;

            if (isdigit(c) || isalpha(c)) out += c;

            ++start;
        }

        return out;
    }

public:
    Section() :
        m_Tokens(0)
    {}

    Section(const string& t) :
        m_Text(t),
        m_Tokens(0)
    {}

    void GetTokens(vector<string>& itmvec) const
    {
        unsigned int pos = 0;

        while (pos < m_Text.length())
        {
            const string token = GetToken(m_Text, pos);

            if (!token.empty() && find(itmvec.begin(), itmvec.end(), token) == itmvec.end())
            {
                itmvec.push_back(token);
            }
        }
    }

    void CountTokens(const vector<string>& itmvec, vector<double>& dvec, unsigned int& count)
    {
        m_Tokens = 0;
        m_TokenCounts = vector<double>(itmvec.size(), 0.0);
        
        unsigned int pos = 0;

        while (pos < m_Text.length())
        {
            const string token = GetToken(m_Text, pos);

            for (unsigned int i = 0; i < itmvec.size(); ++i)
            {
                if (token == itmvec[i])
                {
                    ++m_Tokens;
                    m_TokenCounts.at(i) += 1.0;
                    ++count;
                    dvec.at(i) += 1.0;
                    break;
                }
            }
        }
    }

    double dotproduct(const Section& other) const
    {
        if (m_TokenCounts.size() != other.m_TokenCounts.size()) cout << "Size mismatch in cosine\n";

        double result = 0.0;

        for (unsigned int v = 0; v < m_TokenCounts.size(); ++v)
        {
            result += m_TokenCounts[v] * other.m_TokenCounts[v];
        }

        return result;
    }

    void Normalise(const vector<double>& gvec, const unsigned int tokens)
    {
        if (m_TokenCounts.size() != gvec.size()) cout << "Size error in LogNormalise\n";

        double len = 0.0;
 
        for (unsigned int i = 0; i < m_TokenCounts.size(); ++i)
        {
            if (m_TokenCounts[i] != 0.0)
            {
                const double lv = (m_TokenCounts[i] / m_Tokens) / (gvec[i] / tokens);
                len += lv * lv;
            }
        }

        len = sqrt(len);

        for (unsigned int i = 0; i < m_TokenCounts.size(); ++i)
        {
            if (m_TokenCounts[i] != 0.0)
            {
                const double lv = (m_TokenCounts[i] / m_Tokens) / (gvec[i] / tokens);
                m_TokenCounts[i] = lv / len;
            }
        }
    }
};


int main()
{
    string input;
    getline(cin, input);
    const unsigned int N = static_cast<unsigned int>(stoi(input));

    vector<Section> SetA(N);
    vector<Section> SetB(N);

    vector<string> items;

    // Read in strings from stdin and extract tokens

    for (unsigned int n = 0; n < N; ++n)
    {
        getline(cin, input);
        SetA[n] = Section(input);
        SetA[n].GetTokens(items);
    }

    getline(cin, input);  // Get the separator *****

    for (unsigned int n = 0; n < N; ++n)
    {
        getline(cin, input);
        SetB[n] = Section(input);
        SetB[n].GetTokens(items);
    }

    // Count token occurrences in all strings, also keep global count

    vector<double> GlobalFreqs(items.size(), 0.0);
    unsigned int GlobalTokens = 0;

    for (unsigned int n = 0; n < SetA.size(); ++n)
    {
        SetA[n].CountTokens(items, GlobalFreqs, GlobalTokens);
    }

    for (unsigned int n = 0; n < SetB.size(); ++n)
    {
        SetB[n].CountTokens(items, GlobalFreqs, GlobalTokens);
    }

    // Make all document frequencies relative, and normalise

    for (unsigned int n = 0; n < SetA.size(); ++n)
    {
        SetA[n].Normalise(GlobalFreqs, GlobalTokens);
    }

    for (unsigned int n = 0; n < SetB.size(); ++n)
    {
        SetA[n].Normalise(GlobalFreqs, GlobalTokens);
    }

    // Create a matrix with all cosines

    vector<vector<double>> cosines;

    for (unsigned int a = 0; a < SetA.size(); ++a)
    {
        vector<double> cvec;

        for (unsigned int b = 0; b < SetB.size(); ++b)
        {
            cvec.push_back(SetA[a].dotproduct(SetB[b]));
        }

        cosines.push_back(cvec);
    }

    // Make the best pairings

    vector<unsigned int> pairs(N, 0);

    for (unsigned int p = 0; p < N; ++p)
    {
        // Get the best cosine value, ignoring items that have already been paired
        unsigned int BestA = N + 1;
        unsigned int BestB = N + 1;
        double BestCosine = -2.0;

        for (unsigned int a = 0; a < cosines.size(); ++a)
        {
            if (pairs.at(a) == 0)
            {
                for (unsigned int b = 0; b < cosines[a].size(); ++b)
                {
                    if (find(pairs.begin(), pairs.end(), b + 1) == pairs.end())
                    {
                        if (cosines[a][b] > BestCosine)
                        {
                            BestCosine = cosines[a][b];
                            BestA = a;
                            BestB = b;
                        }
                    }
                }
            }
        }

        pairs[BestA] = BestB + 1;
    }

    for (unsigned int p = 0; p < pairs.size(); ++p)
    {
        cout << pairs[p] << endl;
    }

    return 0;
}
